{"version":3,"sources":["logo.svg","components/VideoPlayer.js","components/VideoListItem.js","components/VideoList.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","VideoPlayer","this","props","selectedVideo","react_default","a","createElement","className","videoID","id","videoId","videoURL","concat","src","Component","VideoListItem","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","active","video","videoSelect","_this2","etag","onClick","selectThisVideo","snippet","thumbnails","medium","url","title","channelTitle","VideoList","loading","items","videos","map","components_VideoListItem","key","onVideoSelect","SearchBar","onSubmit","getVideo","type","name","placeholder","App","searchVideo","_ref","asyncToGenerator","regenerator_default","mark","_callee","ev","term","wrap","_context","prev","next","preventDefault","target","elements","value","getData","stop","_x","apply","arguments","YTSearch","setState","console","log","_this3","components_SearchBar","components_VideoPlayer","components_VideoList","userSelected","selectVideo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0MCuBzBC,yLAjBP,IAAKC,KAAKC,MAAMC,cACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAKvB,IAAMC,EAAUP,KAAKC,MAAMC,cAAcM,GAAGC,QACtCC,EAAQ,6BAAAC,OAAgCJ,GAC9C,OACIJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,4BACfH,EAAAC,EAAAC,cAAA,UAAQO,IAAKF,YAbHG,cCiCXC,cAhCX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KACDoB,MAAQ,CACTC,QAAQ,GAHGP,+EAOHQ,GACZvB,KAAKC,MAAMuB,YAAYD,oCAGlB,IAAAE,EAAAzB,KACCE,EAAgBF,KAAKC,MAAMC,cAC3BqB,EAAQvB,KAAKC,MAAMsB,MACzB,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UACAJ,EAAcwB,OAASH,EAAMG,KAAQ,qCAAuC,kCAC5EC,QAAS,WACLF,EAAKG,gBAAgBL,KAE1BpB,EAAAC,EAAAC,cAAA,OAAKO,IAAKW,EAAMM,QAAQC,WAAWC,OAAOC,MAC1C7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6BACZH,EAAAC,EAAAC,cAAA,UAAKkB,EAAMM,QAAQI,OACnB9B,EAAAC,EAAAC,cAAA,0BAAYF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAAhB,IAA2CiB,EAAMM,QAAQK,gBAEvEhC,EAAcwB,OAASH,EAAMG,MAASvB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,mBA1B5BO,aC0BbsB,mLAxBF,IAAApB,EAAAf,KACL,GAAIA,KAAKC,MAAMmC,QACX,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,0BAIZ,IAAMgC,EAAQrC,KAAKC,MAAMqC,OAAOC,IAAI,SAAChB,GAC7B,OACGpB,EAAAC,EAAAC,cAACmC,EAAD,CAAeC,IAAKlB,EAAMG,KAAMH,MAAOA,EAAOrB,cAAea,EAAKd,MAAMC,cAAesB,YAAaT,EAAKd,MAAMyC,kBAK1H,OACEvC,EAAAC,EAAAC,cAAA,WAASC,UAAU,0BACd+B,UAlBSxB,aCYT8B,mLAZP,OACIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,QAAMuC,SAAU5C,KAAKC,MAAM4C,UACvB1C,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OAAOC,KAAK,OAAOC,YAAY,kCAC3C7C,EAAAC,EAAAC,cAAA,iCANIQ,aC+DToC,cAtDX,SAAAA,EAAYhD,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAiD,IACflC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAApB,KAAMC,KAkBViD,YAnBmB,eAAAC,EAAAnC,OAAAoC,EAAA,EAAApC,CAAAqC,EAAAjD,EAAAkD,KAmBL,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAJ,EAAAjD,EAAAsD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACVL,EAAGM,iBACH/C,EAAKM,MAAQ,CACTiB,OAAQ,GACRpC,cAAe,MAEbuD,EAAOD,EAAGO,OAAOC,SAASP,KAAKQ,MACrClD,EAAKmD,QAAQT,GAPH,wBAAAE,EAAAQ,SAAAZ,EAAAvD,SAnBK,gBAAAoE,GAAA,OAAAjB,EAAAkB,MAAArE,KAAAsE,YAAA,GAEfvD,EAAKM,MAAQ,CACTiB,OAAQ,GACRpC,cAAe,MAEnBa,EAAKmD,QAAQ,IANEnD,uEASX0C,GAAM,IAAAhC,EAAAzB,KACVuE,IAAS,CAAC9B,IAdF,0CAcgBgB,KAAMA,GAAO,SAACnB,GAClCb,EAAK+C,SAAS,CACVlC,OAAQA,EACRpC,cAAeoC,EAAO,KAE1BmC,QAAQC,IAAIpC,yCAcRf,GACRvB,KAAKwE,SAAS,CACVtE,cAAeqB,qCAId,IAAAoD,EAAA3E,KACL,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBACdH,EAAAC,EAAAC,cAAA,gCAEJF,EAAAC,EAAAC,cAACuE,EAAD,CAAW/B,SAAU7C,KAAKkD,cAC1B/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAACwE,EAAD,CAAa3E,cAAeF,KAAKqB,MAAMnB,gBACvCC,EAAAC,EAAAC,cAACyE,EAAD,CAAWxC,OAAQtC,KAAKqB,MAAMiB,OAAQpC,cAAeF,KAAKqB,MAAMnB,cACrDwC,cAAe,SAACqC,GACZJ,EAAKK,YAAYD,eA/ClClE,aCCEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9050e910.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass VideoPlayer extends Component {\r\n    render() {\r\n        if (!this.props.selectedVideo) {\r\n            return (\r\n                <div className=\"YoutubeApp__loading\">\r\n                    {/*<p>Loading</p>*/}\r\n                </div>\r\n            );\r\n        }\r\n        const videoID = this.props.selectedVideo.id.videoId;\r\n        const videoURL = `https://youtube.com/embed/${videoID}`;\r\n        return (\r\n            <section className=\"YoutubeApp__video-player\">\r\n                <iframe src={videoURL}></iframe>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoPlayer;","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass VideoListItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        }\r\n    }\r\n\r\n    selectThisVideo(video) {\r\n        this.props.videoSelect(video);\r\n    }\r\n\r\n    render() {\r\n        const selectedVideo = this.props.selectedVideo;\r\n        const video = this.props.video;\r\n        return (\r\n            <div className={\r\n                (selectedVideo.etag === video.etag) ? \"YoutubeApp__video-item videoActive\" : \"YoutubeApp__video-item inactive\"}\r\n                 onClick={() => {\r\n                     this.selectThisVideo(video)\r\n                 }}>\r\n                <img src={video.snippet.thumbnails.medium.url}/>\r\n                <span className=\"YoutubeApp__video-details\">\r\n                    <h4>{video.snippet.title}</h4>\r\n                    <p>z kana≈Çu <span className=\"video-details__account\"> {video.snippet.channelTitle}</span></p>\r\n                </span>\r\n                {(selectedVideo.etag === video.etag) && <span className=\"current-playing\">Playing</span>}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default VideoListItem;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport VideoListItem from \"./VideoListItem\";\r\n\r\n\r\nclass VideoList extends Component {\r\n    render() {\r\n        if (this.props.loading) {\r\n            return (\r\n                <div className=\"YoutubeApp__loading\">\r\n                    <p>Loading List</p>\r\n                </div>\r\n            );\r\n        }\r\n        const items = this.props.videos.map((video) => {\r\n                return (\r\n                   <VideoListItem key={video.etag} video={video} selectedVideo={this.props.selectedVideo} videoSelect={this.props.onVideoSelect}/>\r\n\r\n                );\r\n            }\r\n        );\r\n        return (\r\n          <section className=\"YoutubeApp__video-list\">\r\n              {items}\r\n          </section>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default VideoList;","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\nclass SearchBar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"YoutubeApp__search\">\r\n                <form onSubmit={this.props.getVideo}>\r\n                    <input type='text' name=\"term\" placeholder=\"What would you like to watch?\"/>\r\n                    <button>Szukaj</button>\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport YTSearch from 'youtube-api-search';\nimport './App.css';\nimport VideoPlayer from \"./components/VideoPlayer\";\nimport VideoList from \"./components/VideoList\";\nimport SearchBar from \"./components/SearchBar\";\n\nconst API_KEY = \"AIzaSyDWktnfDR257HdTiTAO1ruSdez1gt5TYHE\";\nconst maxResults = 10;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videos: [],\n            selectedVideo: null,\n        };\n        this.getData(\"\");\n    }\n\n    getData(term) {\n        YTSearch({key: API_KEY, term: term}, (videos) => {\n            this.setState({\n                videos: videos,\n                selectedVideo: videos[0],\n            });\n            console.log(videos);\n        });\n    }\n\n    searchVideo = async (ev) => {\n        ev.preventDefault();\n        this.state = {\n            videos: [],\n            selectedVideo: null,\n        };\n        const term = ev.target.elements.term.value;\n        this.getData(term);\n    };\n\n    selectVideo(video) {\n        this.setState({\n            selectedVideo: video,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"YoutubeApp\">\n                <header className=\"YoutubeApp__header\">\n                    <h1>React YouTube App</h1>\n                </header>\n                <SearchBar getVideo={this.searchVideo}/>\n                <div className=\"YoutubeApp__content\">\n                    <VideoPlayer selectedVideo={this.state.selectedVideo}/>\n                    <VideoList videos={this.state.videos} selectedVideo={this.state.selectedVideo}\n                               onVideoSelect={(userSelected) => {\n                                   this.selectVideo(userSelected)\n                               }}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}